{"version":3,"sources":["webpack:///./src/templates/index.js"],"names":["Sidebar","SidebarCard","SidebarCardHeader","SidebarCardSeperator","Index","data","location","pageContext","posts","allGhostPost","edges","featured","featuredPosts","tags","allGhostTag","tagElements","index","length","push","key","to","node","slug","name","featuredElements","css","feature_image","title","getCustomFormatedDate","published_at","currentPost","isHome","className","map","number","id","post","pageQuery"],"mappings":"sNAmBMA,EAAO,0CAEPC,EAAW,sLAUXC,EAAiB,2HAKjBC,EAAoB,2K,+YAmHXC,UA3GD,SAAC,GAMX,IANgD,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YACvBC,EAAQH,EAAKI,aAAaC,MAC1BC,EAAWN,EAAKO,cAAcF,MAC9BG,EAAOR,EAAKS,YAAYJ,MAExBK,EAAc,GACXC,EAAQ,EAAGA,EAAQH,EAAKI,OAAQD,IACrCD,EAAYG,KAAK,YAAC,OAAD,CAAMC,IAAKH,EAAOI,GAAI,QAAQP,EAAKG,GAAOK,KAAKC,MAC3DT,EAAKG,GAAOK,KAAKE,OAK1B,IADA,IAAMC,EAAmB,GAChBR,EAAQ,EAAGA,EAAQL,EAASM,OAAQD,IACzCQ,EAAiBN,KAAK,YAAC,OAAD,CAAMO,IAAG,EAW/BN,IAAKH,EAAOI,GAAI,IAAIT,EAASK,GAAOK,KAAKC,MACrC,mBAAKG,IAAKA,YAAF,2CAEoBd,EAASK,GAAOK,KAAKK,cAFzC,yEASR,sBAAKf,EAASK,GAAOK,KAAKM,OAC1B,wBAAOC,YAAsBjB,EAASK,GAAOK,KAAKQ,iBAI1D,IAAIC,EAAc,EAElB,OACI,8BACI,YAAC,IAAD,CAAUxB,SAAUA,IACpB,YAAC,IAAD,CAAQyB,QAAQ,GACZ,mBAAKC,UAAU,YAAYP,IAAG,GAI1B,mBAAKA,IAAG,GAQJ,uBAASA,IAAKA,eAGTjB,EAAMyB,KAAI,gBAAGZ,EAAH,EAAGA,KAAH,OAEP,WADA,CACC,IAAD,CAAUa,OAAQJ,IAAeX,IAAKE,EAAKc,GAAIC,KAAMf,QAG7D,YAACrB,EAAD,KACI,YAACC,EAAD,KACI,YAACC,EAAD,mBACA,YAACC,EAAD,MACA,mBAAKsB,IAAG,GAOHV,IAIT,YAACd,EAAD,KACI,YAACC,EAAD,uBACA,YAACC,EAAD,MACCqB,KAKb,YAAC,IAAD,CAAYjB,YAAaA,QAsBtC,IAAM8B,EAAS","file":"component---src-templates-index-js-ecb37fa60689f1a2a7cf.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { graphql, Link } from 'gatsby'\r\nimport { css } from '@emotion/core'\r\nimport styled from '@emotion/styled'\r\n\r\nimport { Layout, PostCard, Pagination } from '../components/common'\r\nimport { MetaData } from '../components/common/meta'\r\nimport getCustomFormatedDate from '../utils/date';\r\n\r\n/**\r\n* Main index page (home page)\r\n*\r\n* Loads all posts from Ghost and uses pagination to navigate through them.\r\n* The number of posts that should appear per page can be setup\r\n* in /utils/siteConfig.js under `postsPerPage`.\r\n*\r\n*/\r\n\r\nconst Sidebar = styled.div`\r\n`;\r\nconst SidebarCard = styled.div`\r\n    background: #fff;\r\n    border: 1px solid #d5d7e2;\r\n    padding: 1rem;\r\n    margin: 1rem;\r\n    font-size: .82rem;\r\n    &:nth-of-type(1) {\r\n        margin-top: 0;\r\n    }\r\n`;\r\nconst SidebarCardHeader = styled.div`\r\n    font-size: 1rem;\r\n    font-weight: 700;\r\n    color: var(--color-base);\r\n`;\r\nconst SidebarCardSeperator = styled.div`\r\n    border-top: 2px solid #c8c6c8;\r\n    margin: .5rem 0;\r\n    margin: calc(.5rem - 1px) 0;\r\n    box-sizing: border-box;\r\n    width: 100%;\r\n`;\r\n\r\nconst Index = ({ data, location, pageContext }) => {\r\n    const posts = data.allGhostPost.edges\r\n    const featured = data.featuredPosts.edges\r\n    const tags = data.allGhostTag.edges\r\n\r\n    const tagElements = [];\r\n    for (let index = 0; index < tags.length; index++) {\r\n        tagElements.push(<Link key={index} to={'/tag/'+tags[index].node.slug}>\r\n            {tags[index].node.name}\r\n        </Link>);\r\n    }\r\n\r\n    const featuredElements = [];\r\n    for (let index = 0; index < featured.length; index++) {\r\n        featuredElements.push(<Link css={css`\r\n            display: block;\r\n            margin-top: 2rem;\r\n\r\n            &:nth-of-type(1) {\r\n                margin-top: 1rem;\r\n            }\r\n            &:hover {\r\n                text-decoration: none;\r\n            }\r\n        `} \r\n        key={index} to={'/'+featured[index].node.slug}>\r\n            <div css={css`\r\n                border-radius: 12px;\r\n                background-image: url(${featured[index].node.feature_image});\r\n                background-size: cover;\r\n                background-position: center;\r\n                padding: 30% 50%;\r\n            `}>\r\n\r\n            </div>\r\n            <h3>{featured[index].node.title}</h3>\r\n            <span>{getCustomFormatedDate(featured[index].node.published_at)}</span>\r\n        </Link>);\r\n    }\r\n\r\n    let currentPost = 0;\r\n\r\n    return (\r\n        <>\r\n            <MetaData location={location} />\r\n            <Layout isHome={true}>\r\n                <div className=\"container\" css={css`\r\n                    position: relative;\r\n                    z-index: 1;\r\n                `}>\r\n                    <div css={css`\r\n                        display: grid;\r\n                        grid-template-columns: 6fr 3fr;\r\n                        grid-gap: 2rem;\r\n                        @media (max-width: 1200px) {\r\n                            display: block;\r\n                        }\r\n                    `}>\r\n                        <section css={css`\r\n                            \r\n                        `}>\r\n                            {posts.map(({ node }) => (\r\n                                // The tag below includes the markup for each post - components/common/PostCard.js\r\n                                <PostCard number={currentPost++} key={node.id} post={node} />\r\n                            ))}\r\n                        </section>\r\n                        <Sidebar>\r\n                            <SidebarCard>\r\n                                <SidebarCardHeader>Categories</SidebarCardHeader>\r\n                                <SidebarCardSeperator />\r\n                                <div css={css`\r\n                                    & > a {\r\n                                        display: block;\r\n                                        color: var(--color-primary);\r\n                                        font-style: italic;\r\n                                    }\r\n                                `}>\r\n                                    {tagElements}\r\n                                </div>\r\n                            </SidebarCard>\r\n                            \r\n                            <SidebarCard>\r\n                                <SidebarCardHeader>Featured Posts</SidebarCardHeader>\r\n                                <SidebarCardSeperator />\r\n                                {featuredElements}\r\n                            </SidebarCard>\r\n                        </Sidebar>\r\n\r\n                    </div>\r\n                    <Pagination pageContext={pageContext} />\r\n                </div>\r\n            </Layout>\r\n        </>\r\n    )\r\n}\r\n\r\nIndex.propTypes = {\r\n    data: PropTypes.shape({\r\n        allGhostPost: PropTypes.object.isRequired,\r\n        allGhostTag: PropTypes.object.isRequired,\r\n    }).isRequired,\r\n    location: PropTypes.shape({\r\n        pathname: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n    pageContext: PropTypes.object,\r\n}\r\n\r\nexport default Index\r\n\r\n// This page query loads all posts sorted descending by published date\r\n// The `limit` and `skip` values are used for pagination\r\nexport const pageQuery = graphql`\r\n    query GhostPostQuery($limit: Int!, $skip: Int!) {\r\n        allGhostPost(\r\n            sort: { order: DESC, fields: [published_at] },\r\n            limit: $limit,\r\n            skip: $skip,\r\n        ) {\r\n            edges {\r\n                node {\r\n                    ...GhostPostFields\r\n                }\r\n            }\r\n        }\r\n        \r\n        featuredPosts: allGhostPost(\r\n            sort: { order: DESC, fields: [published_at] },\r\n            filter: { featured: {eq: true} }\r\n        ) {\r\n            edges {\r\n                node {\r\n                    ...GhostPostFields\r\n                }\r\n            }\r\n        }\r\n\r\n        allGhostTag(\r\n            sort: { order: DESC, fields: slug },\r\n        ) {\r\n            edges {\r\n                node {\r\n                    ...GhostTagFields\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n"],"sourceRoot":""}